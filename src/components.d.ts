/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { StringifiedJson } from "./stories/components/color-swatch-group/color-swatch-group";
import { Align, AvatarData, AvatarDetailVariant, AvatarIconSize, DropdownSize, IconSize, InputSize, None, Notification, NotificationVariant, Position, Resize, Size, Spacing, SpacingShorthand, TextSize, TextState, TextVariant, TooltipVariant, TriggerEvent } from "./components/helpers/types";
import { ButtonVariants } from "./components/zen-button/types";
import { OptionValue } from "./components/zen-menu-item/zen-option";
import { IconDefinition } from "@fortawesome/pro-light-svg-icons";
import { OptionValue as OptionValue1 } from "./components/zen-menu-item/zen-option";
import { Offsets, Placement } from "@popperjs/core";
import { StepItem } from "./components/zen-progress-tracker/zen-progress-tracker";
import { StepsFilter } from "./components/zen-progress-tracker/types";
export namespace Components {
    interface ColorSwatch {
        /**
          * Hex color value
         */
        "color": string;
        /**
          * True if color is considered bright
         */
        "isBrightColor": boolean;
        /**
          * Scss variable name
         */
        "varName": string;
    }
    interface ColorSwatchGroup {
        /**
          * Array of colors
         */
        "colors": StringifiedJson;
    }
    interface DocsTable {
        /**
          * Data from stencilDocs.json
         */
        "docs": string;
    }
    interface HtmlPlayground {
        /**
          * Save current value to local storage and restore it on load
         */
        "saveValue": true;
        /**
          * What framework is initally selected
         */
        "selectedFramework": string;
        /**
          * What framework is initally selected
         */
        "sourceCodes": SourceCodes;
    }
    interface TextWithDetails {
    }
    interface ZenAnimate {
        /**
          * Prop that will show the slot
         */
        "show": boolean;
    }
    interface ZenAvatar {
        /**
          * Set show icon animation
         */
        "animation": boolean;
        /**
          * Set users input data
         */
        "users": AvatarData[];
    }
    interface ZenAvatarDetails {
        /**
          * Set user email
         */
        "email": string;
        /**
          * Set icon background color
         */
        "iconBackground": string;
        /**
          * Set icon color
         */
        "iconColor": string;
        /**
          * Set override for user name initials
         */
        "initials": string;
        /**
          * <Description generated in helper file>
         */
        "padding": SpacingShorthand;
        /**
          * Skipped
         */
        "paddingBottom": Spacing;
        /**
          * Skipped
         */
        "paddingLeft": Spacing;
        /**
          * Skipped
         */
        "paddingRight": Spacing;
        /**
          * Skipped
         */
        "paddingTop": Spacing;
        /**
          * Set user name
         */
        "userName": string;
        /**
          * Set the style variant
         */
        "variant": AvatarDetailVariant;
    }
    interface ZenAvatarGroup {
        /**
          * If multiple avatars then show icon animation
         */
        "animation": boolean;
        /**
          * Max number of icons to display
         */
        "maxIcons": number;
        /**
          * Icons size
         */
        "size": IconSize;
        /**
          * Array of user's data
         */
        "users": AvatarData[];
    }
    interface ZenAvatarIcon {
        /**
          * Set background color
         */
        "background": string;
        /**
          * Set font color
         */
        "color": string;
        /**
          * Set email
         */
        "email": string;
        /**
          * Set image URL
         */
        "imageUrl": string;
        /**
          * Set override for user name initials
         */
        "initials": string;
        /**
          * Icon size
         */
        "size": AvatarIconSize;
        /**
          * Set name and surname
         */
        "userName": string;
    }
    interface ZenBreadcrumbs {
        /**
          * The separator string
         */
        "separator": string;
    }
    interface ZenButton {
        /**
          * If present, button will be disabled
         */
        "disabled"?: boolean;
        /**
          * If present, will show a spinner
         */
        "loading"?: boolean;
        /**
          * Name of element, can be used as reference for form data
         */
        "name": string;
        /**
          * Size variant
         */
        "size": InputSize;
        /**
          * Color variant of the button
         */
        "variant": ButtonVariants;
    }
    interface ZenCard {
        /**
          * Disables card.
         */
        "disabled": false;
        /**
          * <Description generated in helper file>
         */
        "padding": SpacingShorthand;
        /**
          * Skipped
         */
        "paddingBottom": Spacing;
        /**
          * Skipped
         */
        "paddingLeft": Spacing;
        /**
          * Skipped
         */
        "paddingRight": Spacing;
        /**
          * Skipped
         */
        "paddingTop": Spacing;
    }
    interface ZenCheckbox {
        /**
          * Set checked state.
         */
        "checked": boolean;
        /**
          * Disables checkbox.
         */
        "disabled": false;
        /**
          * Shows the checkbox in indeterminate state
         */
        "indeterminate": boolean;
        /**
          * Label of the checkbox.
         */
        "label": string;
        /**
          * Name of element, can be used as reference for form data
         */
        "name": string;
        /**
          * Shows a red asterisk after label.
         */
        "required": false;
    }
    interface ZenDatePicker {
        /**
          * If user can clear the date.
         */
        "allowEmpty": boolean;
        /**
          * Set value to invalid date and formattedDate to empty string.
         */
        "clearDate": () => Promise<void>;
        /**
          * Close calendar after picking a date
         */
        "closeOnClick": boolean;
        /**
          * Date format
         */
        "format": string;
        /**
          * Selected date
         */
        "formattedDate": string | null;
        /**
          * Shows invalid styles.
         */
        "invalid": false;
        /**
          * Placeholder
         */
        "placeholder": "Select date";
        /**
          * Size variant
         */
        "size": InputSize;
        /**
          * Selected date
         */
        "value": Date;
    }
    interface ZenDivider {
    }
    interface ZenDrawer {
        /**
          * Is drawer visible
         */
        "opened": false;
        /**
          * <Description generated in helper file>
         */
        "padding": SpacingShorthand;
        /**
          * Skipped
         */
        "paddingBottom": Spacing;
        /**
          * Skipped
         */
        "paddingLeft": Spacing;
        /**
          * Skipped
         */
        "paddingRight": Spacing;
        /**
          * Skipped
         */
        "paddingTop": Spacing;
        /**
          * Position
         */
        "position": Position;
    }
    interface ZenDropdown {
        /**
          * Don't draw border around field
         */
        "borderless": false;
        /**
          * Close dropdown menu after selecting an item
         */
        "closeOnSelect": true;
        /**
          * Disable any changes
         */
        "disabled"?: boolean;
        /**
          * Alignment of field content and menu (if menuWidth set).
         */
        "fieldAlign": Align;
        /**
          * Shows invalid styles.
         */
        "invalid": false;
        /**
          * To determine if there's enough space under field on open
         */
        "menuHeight": string;
        /**
          * Width of menu. Set '100%' to match field width.
         */
        "menuWidth": string;
        /**
          * Name of element, can be used as reference for form data
         */
        "name": string;
        /**
          * Text in field if nothing selected
         */
        "placeholder": string;
        /**
          * Size variant (affects padding, arrow and placeholder). Use `custom` to set height based on selected zen-option item height.
         */
        "size": DropdownSize;
        /**
          * Close an opened dropdown menu
         */
        "toggle": (open?: boolean) => Promise<void>;
        /**
          * Selected option
         */
        "value": OptionValue;
    }
    interface ZenIcon {
        /**
          * Icon data (js file) imported from Font Awesome SVG package.
         */
        "icon": IconDefinition;
        /**
          * <Description generated in helper file>
         */
        "padding": SpacingShorthand;
        /**
          * Skipped
         */
        "paddingBottom": Spacing;
        /**
          * Skipped
         */
        "paddingLeft": Spacing;
        /**
          * Skipped
         */
        "paddingRight": Spacing;
        /**
          * Skipped
         */
        "paddingTop": Spacing;
        /**
          * Size of the icon.
         */
        "size": IconSize;
    }
    interface ZenInput {
        /**
          * Should display clear button if focused and not empty
         */
        "clearButton": true;
        /**
          * Disables input.
         */
        "disabled": false;
        /**
          * Focus next control when pressing Enter key
         */
        "enterToTab": true;
        /**
          * Focus input
         */
        "focusInput": () => Promise<void>;
        /**
          * Paint focused border
         */
        "hasFocus": false;
        /**
          * Shows invalid styles.
         */
        "invalid": false;
        /**
          * Name of element, can be used as reference for form data
         */
        "name": string;
        /**
          * Placeholder of the input.
         */
        "placeholder": string;
        /**
          * Size variant
         */
        "size": InputSize;
        /**
          * The value of the input.
         */
        "value"?: string;
    }
    interface ZenModal {
        /**
          * Padding of content
         */
        "contentPadding": SpacingShorthand;
        /**
          * Padding of footer
         */
        "footerPadding": SpacingShorthand;
        /**
          * Padding of header
         */
        "headerPadding": SpacingShorthand;
        /**
          * Hide default top-right X and default Cancel button
         */
        "hideCancel": boolean;
        /**
          * Modal title (irrelevant if slot `header` passed)
         */
        "label": string;
        /**
          * Set `true` to show and `false` to hide modal
         */
        "show": false;
    }
    interface ZenNotification {
        /**
          * Can dismiss
         */
        "dismissable": boolean;
        /**
          * Title
         */
        "heading": string;
        /**
          * Variant
         */
        "variant": NotificationVariant;
    }
    interface ZenNotificationsWrapper {
        /**
          * Displays a notification
         */
        "displayNotification": ({ heading, content, variant }: Notification) => Promise<void>;
    }
    interface ZenOption {
        /**
          * Disable selecting option in dropdown
         */
        "disabled"?: boolean;
        /**
          * Render item as focused
         */
        "focused": boolean;
        /**
          * Prevents default hover style on mouse hover
         */
        "noHover"?: boolean;
        /**
          * <Description generated in helper file>
         */
        "padding": SpacingShorthand;
        /**
          * Skipped
         */
        "paddingBottom": Spacing;
        /**
          * Skipped
         */
        "paddingLeft": Spacing;
        /**
          * Skipped
         */
        "paddingRight": Spacing;
        /**
          * Skipped
         */
        "paddingTop": Spacing;
        /**
          * Render item as selected
         */
        "selected": boolean;
        /**
          * Size variant
         */
        "size": InputSize;
        /**
          * Value of option when used inside a dropdown
         */
        "value": OptionValue;
    }
    interface ZenPanel {
        /**
          * Padding of content section
         */
        "contentPadding": SpacingShorthand;
        /**
          * <Description generated in helper file>
         */
        "padding": SpacingShorthand;
        /**
          * Skipped
         */
        "paddingBottom": Spacing;
        /**
          * Skipped
         */
        "paddingLeft": Spacing;
        /**
          * Skipped
         */
        "paddingRight": Spacing;
        /**
          * Skipped
         */
        "paddingTop": Spacing;
        /**
          * Default visible state
         */
        "visible": boolean;
    }
    interface ZenPopover {
        /**
          * Background color
         */
        "backgroundColor": string;
        /**
          * Close on click outside
         */
        "closeOnClickOut": boolean;
        /**
          * Close on target click if opened
         */
        "closeOnTargetClick": boolean;
        /**
          * Show and hide delay. Only affects show on hover! Eg. '100' - both show & hide 100ms. '100 500' - show 100ms, hide 500ms.
         */
        "delay": string;
        /**
          * Returns popup html element (the thing with background and shadow)
         */
        "getPopup": () => Promise<HTMLElement>;
        /**
          * User can click content within popover
         */
        "interactive": boolean;
        /**
          * Popover offset
         */
        "offset": Offsets;
        /**
          * <Description generated in helper file>
         */
        "padding": SpacingShorthand;
        /**
          * Skipped
         */
        "paddingBottom": Spacing;
        /**
          * Skipped
         */
        "paddingLeft": Spacing;
        /**
          * Skipped
         */
        "paddingRight": Spacing;
        /**
          * Skipped
         */
        "paddingTop": Spacing;
        /**
          * Position
         */
        "position": Placement;
        /**
          * Control scroll position when scrollable content
         */
        "setScrollTop": (position: number) => Promise<void>;
        /**
          * Trigger element
         */
        "targetElement": HTMLElement;
        /**
          * Close an opened dropdown menu
         */
        "toggle": (show?: boolean) => Promise<void>;
        /**
          * Triggering event
         */
        "triggerEvent": TriggerEvent;
        /**
          * Show/hide popover
         */
        "visible": boolean;
    }
    interface ZenProgressTracker {
        /**
          * Index of currently active step
         */
        "activeIndex": number;
        /**
          * User can click step to go to step
         */
        "clickable": StepsFilter;
        /**
          * Max label width
         */
        "labelWidth": string;
        /**
          * Ordered array of possible steps
         */
        "steps": Array<StepItem>;
    }
    interface ZenRadio {
        /**
          * Check/uncheck radio
         */
        "checked": boolean;
        /**
          * Radio can't be selected (but you can still set `checked=true`)
         */
        "disabled": false;
        /**
          * Group id to which this radio belongs
         */
        "group": string;
        /**
          * Name of element, can be used as reference for form data
         */
        "name": string;
        /**
          * Shows a red asterisk after label
         */
        "required": false;
        /**
          * Value of selected radio in this group
         */
        "selected": string;
        /**
          * Focus radio programatically
         */
        "setFocus": (focus?: boolean) => Promise<void>;
        /**
          * Value of this radio option
         */
        "value": string;
    }
    interface ZenSkeleton {
        /**
          * Description generated in helper file
         */
        "padding": SpacingShorthand;
        /**
          * Skipped
         */
        "paddingBottom": Spacing;
        /**
          * Skipped
         */
        "paddingLeft": Spacing;
        /**
          * Skipped
         */
        "paddingRight": Spacing;
        /**
          * Skipped
         */
        "paddingTop": Spacing;
        /**
          * Makes the skeleton rounded
         */
        "rounded": boolean;
    }
    interface ZenSortable {
        /**
          * Container padding
         */
        "padding": SpacingShorthand;
        /**
          * Container item spacing
         */
        "spacing": Size | None;
    }
    interface ZenSortableItem {
        /**
          * Container padding
         */
        "padding": SpacingShorthand;
    }
    interface ZenSpace {
        /**
          * In some rare occasions we want display:block
         */
        "block": boolean;
        /**
          * Horizontal align of items
         */
        "horizontalAlign": FlexAlign;
        /**
          * <Description generated in helper file>
         */
        "margin": SpacingShorthand;
        /**
          * Skipped
         */
        "marginBottom": Spacing;
        /**
          * Skipped
         */
        "marginLeft": Spacing;
        /**
          * Skipped
         */
        "marginRight": Spacing;
        /**
          * Skipped
         */
        "marginTop": Spacing;
        /**
          * Break row/column if content doesn't fit
         */
        "noWrap": boolean;
        /**
          * <Description generated in helper file>
         */
        "padding": SpacingShorthand;
        /**
          * Skipped
         */
        "paddingBottom": Spacing;
        /**
          * Skipped
         */
        "paddingLeft": Spacing;
        /**
          * Skipped
         */
        "paddingRight": Spacing;
        /**
          * Skipped
         */
        "paddingTop": Spacing;
        /**
          * Spacing between items
         */
        "spacing": Size | None;
        /**
          * Width: 100%
         */
        "stretch": boolean;
        /**
          * Is it row or column?
         */
        "vertical": boolean;
        /**
          * Vertical align of items
         */
        "verticalAlign": FlexAlign;
    }
    interface ZenSpinner {
    }
    interface ZenTab {
        /**
          * Set tab selected
         */
        "selected": boolean;
    }
    interface ZenTable {
        /**
          * Private variable (table cleanup in progress)
         */
        "$updating": boolean;
        /**
          * Space separated css grid columns<br/>(eg. `auto 1fr 1fr 200px 1fr`)
         */
        "columns": "";
    }
    interface ZenTableCell {
        /**
          * Is row expanded (read-only)
         */
        "$depth": number;
        /**
          * Can be expanded (read-only)
         */
        "$expandable": boolean;
        /**
          * Is row expanded (read-only)
         */
        "$expanded": boolean;
        /**
          * Cell is inside header (read-only)
         */
        "$header": boolean;
        /**
          * Checkbox indeterminate state (read-only)
         */
        "$indeterminate": boolean;
        /**
          * Show checkbox (read-only)
         */
        "$selectable": boolean;
        /**
          * Is row selected (read-only)
         */
        "$selected": boolean;
        /**
          * Cell remains fixed at the top during scroll (mainly used for headers)
         */
        "$sticky": boolean;
        /**
          * Cell custom background color
         */
        "backgroundColor": string;
        /**
          * Spanns through whole table
         */
        "fullSpan": boolean;
    }
    interface ZenTableRow {
        /**
          * Checkbox indeterminate state (Won't update children)
         */
        "$indeterminate": boolean;
        /**
          * Depth position of row (read-only)
         */
        "depth": number;
        /**
          * Can be expanded (if has children)
         */
        "expandable": boolean;
        /**
          * Is row expanded
         */
        "expanded": boolean;
        /**
          * Row represents header
         */
        "header": boolean;
        /**
          * Show checkbox (read-only)
         */
        "selectable": boolean;
        /**
          * Is row selected
         */
        "selected": boolean;
        /**
          * Row remains fixed at the top during scroll (mainly used for headers)
         */
        "sticky": false;
        /**
          * Visible if no depth or parent.expanded
         */
        "visible": boolean;
    }
    interface ZenTabs {
        /**
          * Index of currently selected tab.
         */
        "value": number;
    }
    interface ZenText {
        /**
          * Align content to left, right, center (text-align)
         */
        "align": Align;
        /**
          * Render bold text
         */
        "bold": boolean;
        /**
          * Disabled
         */
        "disabled": boolean;
        /**
          * Layout as inlined
         */
        "inline": boolean;
        /**
          * Render italic text
         */
        "italic": boolean;
        /**
          * Convert casing to lowercase
         */
        "lowercase": boolean;
        /**
          * Show text as gray. Useful for disabled things
         */
        "pale": boolean;
        /**
          * Shows a red asterisk at the end
         */
        "required": false;
        /**
          * Font size
         */
        "size": TextSize;
        /**
          * State text style
         */
        "state": TextState;
        /**
          * Strikethrough
         */
        "strikethrough": boolean;
        /**
          * Truncate
         */
        "truncate": boolean;
        /**
          * Underlined
         */
        "underline": boolean;
        /**
          * Convert casing to uppercase
         */
        "uppercase": boolean;
        /**
          * Apply heading styles
         */
        "variant": TextVariant;
    }
    interface ZenTextarea {
        /**
          * Columns (size)
         */
        "cols": number;
        /**
          * Appends attribute disabled.
         */
        "disabled": false;
        /**
          * Focus input
         */
        "focusInput": () => Promise<void>;
        /**
          * Shows invalid styles.
         */
        "invalid": false;
        /**
          * Name of element, can be used as reference for form data
         */
        "name": string;
        /**
          * Placeholder of the textarea.
         */
        "placeholder": string;
        /**
          * Appends attribute required.
         */
        "required": false;
        /**
          * Resize (variants)
         */
        "resize": Resize;
        /**
          * Rows (size)
         */
        "rows": number;
        /**
          * Prefilled text content
         */
        "text"?: string | null;
    }
    interface ZenToggle {
        /**
          * Set checked state.
         */
        "checked": boolean;
        /**
          * Set disabled state.
         */
        "disabled": false;
        /**
          * Name of element, can be used as reference for form data
         */
        "name": string;
    }
    interface ZenTooltip {
        /**
          * Show and hide delay. Eg. '100' - both show & hide 100ms. '100 500' - show 100ms, hide 500ms.
         */
        "delay": string;
        /**
          * Set tooltip title
         */
        "heading": string;
        /**
          * Set tooltip label
         */
        "label"?: string;
        /**
          * Set link to resource
         */
        "link": string;
        /**
          * Set link title
         */
        "linkTitle": string;
        /**
          * Limit tooltips height and make content scroll
         */
        "maxHeight": string;
        /**
          * Set tooltip max width
         */
        "maxWidth": string;
        /**
          * Set tooltip offset to target element
         */
        "offset"?: number;
        /**
          * Description generated in helper file
         */
        "padding": SpacingShorthand;
        /**
          * Skipped
         */
        "paddingBottom": Spacing;
        /**
          * Skipped
         */
        "paddingLeft": Spacing;
        /**
          * Skipped
         */
        "paddingRight": Spacing;
        /**
          * Skipped
         */
        "paddingTop": Spacing;
        /**
          * Set tooltip position
         */
        "position"?: Placement;
        /**
          * Set tooltip variant
         */
        "variant"?: TooltipVariant;
    }
}
declare global {
    interface HTMLColorSwatchElement extends Components.ColorSwatch, HTMLStencilElement {
    }
    var HTMLColorSwatchElement: {
        prototype: HTMLColorSwatchElement;
        new (): HTMLColorSwatchElement;
    };
    interface HTMLColorSwatchGroupElement extends Components.ColorSwatchGroup, HTMLStencilElement {
    }
    var HTMLColorSwatchGroupElement: {
        prototype: HTMLColorSwatchGroupElement;
        new (): HTMLColorSwatchGroupElement;
    };
    interface HTMLDocsTableElement extends Components.DocsTable, HTMLStencilElement {
    }
    var HTMLDocsTableElement: {
        prototype: HTMLDocsTableElement;
        new (): HTMLDocsTableElement;
    };
    interface HTMLHtmlPlaygroundElement extends Components.HtmlPlayground, HTMLStencilElement {
    }
    var HTMLHtmlPlaygroundElement: {
        prototype: HTMLHtmlPlaygroundElement;
        new (): HTMLHtmlPlaygroundElement;
    };
    interface HTMLTextWithDetailsElement extends Components.TextWithDetails, HTMLStencilElement {
    }
    var HTMLTextWithDetailsElement: {
        prototype: HTMLTextWithDetailsElement;
        new (): HTMLTextWithDetailsElement;
    };
    interface HTMLZenAnimateElement extends Components.ZenAnimate, HTMLStencilElement {
    }
    var HTMLZenAnimateElement: {
        prototype: HTMLZenAnimateElement;
        new (): HTMLZenAnimateElement;
    };
    interface HTMLZenAvatarElement extends Components.ZenAvatar, HTMLStencilElement {
    }
    var HTMLZenAvatarElement: {
        prototype: HTMLZenAvatarElement;
        new (): HTMLZenAvatarElement;
    };
    interface HTMLZenAvatarDetailsElement extends Components.ZenAvatarDetails, HTMLStencilElement {
    }
    var HTMLZenAvatarDetailsElement: {
        prototype: HTMLZenAvatarDetailsElement;
        new (): HTMLZenAvatarDetailsElement;
    };
    interface HTMLZenAvatarGroupElement extends Components.ZenAvatarGroup, HTMLStencilElement {
    }
    var HTMLZenAvatarGroupElement: {
        prototype: HTMLZenAvatarGroupElement;
        new (): HTMLZenAvatarGroupElement;
    };
    interface HTMLZenAvatarIconElement extends Components.ZenAvatarIcon, HTMLStencilElement {
    }
    var HTMLZenAvatarIconElement: {
        prototype: HTMLZenAvatarIconElement;
        new (): HTMLZenAvatarIconElement;
    };
    interface HTMLZenBreadcrumbsElement extends Components.ZenBreadcrumbs, HTMLStencilElement {
    }
    var HTMLZenBreadcrumbsElement: {
        prototype: HTMLZenBreadcrumbsElement;
        new (): HTMLZenBreadcrumbsElement;
    };
    interface HTMLZenButtonElement extends Components.ZenButton, HTMLStencilElement {
    }
    var HTMLZenButtonElement: {
        prototype: HTMLZenButtonElement;
        new (): HTMLZenButtonElement;
    };
    interface HTMLZenCardElement extends Components.ZenCard, HTMLStencilElement {
    }
    var HTMLZenCardElement: {
        prototype: HTMLZenCardElement;
        new (): HTMLZenCardElement;
    };
    interface HTMLZenCheckboxElement extends Components.ZenCheckbox, HTMLStencilElement {
    }
    var HTMLZenCheckboxElement: {
        prototype: HTMLZenCheckboxElement;
        new (): HTMLZenCheckboxElement;
    };
    interface HTMLZenDatePickerElement extends Components.ZenDatePicker, HTMLStencilElement {
    }
    var HTMLZenDatePickerElement: {
        prototype: HTMLZenDatePickerElement;
        new (): HTMLZenDatePickerElement;
    };
    interface HTMLZenDividerElement extends Components.ZenDivider, HTMLStencilElement {
    }
    var HTMLZenDividerElement: {
        prototype: HTMLZenDividerElement;
        new (): HTMLZenDividerElement;
    };
    interface HTMLZenDrawerElement extends Components.ZenDrawer, HTMLStencilElement {
    }
    var HTMLZenDrawerElement: {
        prototype: HTMLZenDrawerElement;
        new (): HTMLZenDrawerElement;
    };
    interface HTMLZenDropdownElement extends Components.ZenDropdown, HTMLStencilElement {
    }
    var HTMLZenDropdownElement: {
        prototype: HTMLZenDropdownElement;
        new (): HTMLZenDropdownElement;
    };
    interface HTMLZenIconElement extends Components.ZenIcon, HTMLStencilElement {
    }
    var HTMLZenIconElement: {
        prototype: HTMLZenIconElement;
        new (): HTMLZenIconElement;
    };
    interface HTMLZenInputElement extends Components.ZenInput, HTMLStencilElement {
    }
    var HTMLZenInputElement: {
        prototype: HTMLZenInputElement;
        new (): HTMLZenInputElement;
    };
    interface HTMLZenModalElement extends Components.ZenModal, HTMLStencilElement {
    }
    var HTMLZenModalElement: {
        prototype: HTMLZenModalElement;
        new (): HTMLZenModalElement;
    };
    interface HTMLZenNotificationElement extends Components.ZenNotification, HTMLStencilElement {
    }
    var HTMLZenNotificationElement: {
        prototype: HTMLZenNotificationElement;
        new (): HTMLZenNotificationElement;
    };
    interface HTMLZenNotificationsWrapperElement extends Components.ZenNotificationsWrapper, HTMLStencilElement {
    }
    var HTMLZenNotificationsWrapperElement: {
        prototype: HTMLZenNotificationsWrapperElement;
        new (): HTMLZenNotificationsWrapperElement;
    };
    interface HTMLZenOptionElement extends Components.ZenOption, HTMLStencilElement {
    }
    var HTMLZenOptionElement: {
        prototype: HTMLZenOptionElement;
        new (): HTMLZenOptionElement;
    };
    interface HTMLZenPanelElement extends Components.ZenPanel, HTMLStencilElement {
    }
    var HTMLZenPanelElement: {
        prototype: HTMLZenPanelElement;
        new (): HTMLZenPanelElement;
    };
    interface HTMLZenPopoverElement extends Components.ZenPopover, HTMLStencilElement {
    }
    var HTMLZenPopoverElement: {
        prototype: HTMLZenPopoverElement;
        new (): HTMLZenPopoverElement;
    };
    interface HTMLZenProgressTrackerElement extends Components.ZenProgressTracker, HTMLStencilElement {
    }
    var HTMLZenProgressTrackerElement: {
        prototype: HTMLZenProgressTrackerElement;
        new (): HTMLZenProgressTrackerElement;
    };
    interface HTMLZenRadioElement extends Components.ZenRadio, HTMLStencilElement {
    }
    var HTMLZenRadioElement: {
        prototype: HTMLZenRadioElement;
        new (): HTMLZenRadioElement;
    };
    interface HTMLZenSkeletonElement extends Components.ZenSkeleton, HTMLStencilElement {
    }
    var HTMLZenSkeletonElement: {
        prototype: HTMLZenSkeletonElement;
        new (): HTMLZenSkeletonElement;
    };
    interface HTMLZenSortableElement extends Components.ZenSortable, HTMLStencilElement {
    }
    var HTMLZenSortableElement: {
        prototype: HTMLZenSortableElement;
        new (): HTMLZenSortableElement;
    };
    interface HTMLZenSortableItemElement extends Components.ZenSortableItem, HTMLStencilElement {
    }
    var HTMLZenSortableItemElement: {
        prototype: HTMLZenSortableItemElement;
        new (): HTMLZenSortableItemElement;
    };
    interface HTMLZenSpaceElement extends Components.ZenSpace, HTMLStencilElement {
    }
    var HTMLZenSpaceElement: {
        prototype: HTMLZenSpaceElement;
        new (): HTMLZenSpaceElement;
    };
    interface HTMLZenSpinnerElement extends Components.ZenSpinner, HTMLStencilElement {
    }
    var HTMLZenSpinnerElement: {
        prototype: HTMLZenSpinnerElement;
        new (): HTMLZenSpinnerElement;
    };
    interface HTMLZenTabElement extends Components.ZenTab, HTMLStencilElement {
    }
    var HTMLZenTabElement: {
        prototype: HTMLZenTabElement;
        new (): HTMLZenTabElement;
    };
    interface HTMLZenTableElement extends Components.ZenTable, HTMLStencilElement {
    }
    var HTMLZenTableElement: {
        prototype: HTMLZenTableElement;
        new (): HTMLZenTableElement;
    };
    interface HTMLZenTableCellElement extends Components.ZenTableCell, HTMLStencilElement {
    }
    var HTMLZenTableCellElement: {
        prototype: HTMLZenTableCellElement;
        new (): HTMLZenTableCellElement;
    };
    interface HTMLZenTableRowElement extends Components.ZenTableRow, HTMLStencilElement {
    }
    var HTMLZenTableRowElement: {
        prototype: HTMLZenTableRowElement;
        new (): HTMLZenTableRowElement;
    };
    interface HTMLZenTabsElement extends Components.ZenTabs, HTMLStencilElement {
    }
    var HTMLZenTabsElement: {
        prototype: HTMLZenTabsElement;
        new (): HTMLZenTabsElement;
    };
    interface HTMLZenTextElement extends Components.ZenText, HTMLStencilElement {
    }
    var HTMLZenTextElement: {
        prototype: HTMLZenTextElement;
        new (): HTMLZenTextElement;
    };
    interface HTMLZenTextareaElement extends Components.ZenTextarea, HTMLStencilElement {
    }
    var HTMLZenTextareaElement: {
        prototype: HTMLZenTextareaElement;
        new (): HTMLZenTextareaElement;
    };
    interface HTMLZenToggleElement extends Components.ZenToggle, HTMLStencilElement {
    }
    var HTMLZenToggleElement: {
        prototype: HTMLZenToggleElement;
        new (): HTMLZenToggleElement;
    };
    interface HTMLZenTooltipElement extends Components.ZenTooltip, HTMLStencilElement {
    }
    var HTMLZenTooltipElement: {
        prototype: HTMLZenTooltipElement;
        new (): HTMLZenTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "color-swatch": HTMLColorSwatchElement;
        "color-swatch-group": HTMLColorSwatchGroupElement;
        "docs-table": HTMLDocsTableElement;
        "html-playground": HTMLHtmlPlaygroundElement;
        "text-with-details": HTMLTextWithDetailsElement;
        "zen-animate": HTMLZenAnimateElement;
        "zen-avatar": HTMLZenAvatarElement;
        "zen-avatar-details": HTMLZenAvatarDetailsElement;
        "zen-avatar-group": HTMLZenAvatarGroupElement;
        "zen-avatar-icon": HTMLZenAvatarIconElement;
        "zen-breadcrumbs": HTMLZenBreadcrumbsElement;
        "zen-button": HTMLZenButtonElement;
        "zen-card": HTMLZenCardElement;
        "zen-checkbox": HTMLZenCheckboxElement;
        "zen-date-picker": HTMLZenDatePickerElement;
        "zen-divider": HTMLZenDividerElement;
        "zen-drawer": HTMLZenDrawerElement;
        "zen-dropdown": HTMLZenDropdownElement;
        "zen-icon": HTMLZenIconElement;
        "zen-input": HTMLZenInputElement;
        "zen-modal": HTMLZenModalElement;
        "zen-notification": HTMLZenNotificationElement;
        "zen-notifications-wrapper": HTMLZenNotificationsWrapperElement;
        "zen-option": HTMLZenOptionElement;
        "zen-panel": HTMLZenPanelElement;
        "zen-popover": HTMLZenPopoverElement;
        "zen-progress-tracker": HTMLZenProgressTrackerElement;
        "zen-radio": HTMLZenRadioElement;
        "zen-skeleton": HTMLZenSkeletonElement;
        "zen-sortable": HTMLZenSortableElement;
        "zen-sortable-item": HTMLZenSortableItemElement;
        "zen-space": HTMLZenSpaceElement;
        "zen-spinner": HTMLZenSpinnerElement;
        "zen-tab": HTMLZenTabElement;
        "zen-table": HTMLZenTableElement;
        "zen-table-cell": HTMLZenTableCellElement;
        "zen-table-row": HTMLZenTableRowElement;
        "zen-tabs": HTMLZenTabsElement;
        "zen-text": HTMLZenTextElement;
        "zen-textarea": HTMLZenTextareaElement;
        "zen-toggle": HTMLZenToggleElement;
        "zen-tooltip": HTMLZenTooltipElement;
    }
}
declare namespace LocalJSX {
    interface ColorSwatch {
        /**
          * Hex color value
         */
        "color"?: string;
        /**
          * True if color is considered bright
         */
        "isBrightColor"?: boolean;
        /**
          * Scss variable name
         */
        "varName"?: string;
    }
    interface ColorSwatchGroup {
        /**
          * Array of colors
         */
        "colors"?: StringifiedJson;
    }
    interface DocsTable {
        /**
          * Data from stencilDocs.json
         */
        "docs"?: string;
    }
    interface HtmlPlayground {
        /**
          * Save current value to local storage and restore it on load
         */
        "saveValue"?: true;
        /**
          * What framework is initally selected
         */
        "selectedFramework"?: string;
        /**
          * What framework is initally selected
         */
        "sourceCodes"?: SourceCodes;
    }
    interface TextWithDetails {
    }
    interface ZenAnimate {
        /**
          * Prop that will show the slot
         */
        "show"?: boolean;
    }
    interface ZenAvatar {
        /**
          * Set show icon animation
         */
        "animation"?: boolean;
        /**
          * Set users input data
         */
        "users"?: AvatarData[];
    }
    interface ZenAvatarDetails {
        /**
          * Set user email
         */
        "email"?: string;
        /**
          * Set icon background color
         */
        "iconBackground"?: string;
        /**
          * Set icon color
         */
        "iconColor"?: string;
        /**
          * Set override for user name initials
         */
        "initials"?: string;
        /**
          * <Description generated in helper file>
         */
        "padding"?: SpacingShorthand;
        /**
          * Skipped
         */
        "paddingBottom"?: Spacing;
        /**
          * Skipped
         */
        "paddingLeft"?: Spacing;
        /**
          * Skipped
         */
        "paddingRight"?: Spacing;
        /**
          * Skipped
         */
        "paddingTop"?: Spacing;
        /**
          * Set user name
         */
        "userName"?: string;
        /**
          * Set the style variant
         */
        "variant"?: AvatarDetailVariant;
    }
    interface ZenAvatarGroup {
        /**
          * If multiple avatars then show icon animation
         */
        "animation"?: boolean;
        /**
          * Max number of icons to display
         */
        "maxIcons"?: number;
        /**
          * Icons size
         */
        "size"?: IconSize;
        /**
          * Array of user's data
         */
        "users"?: AvatarData[];
    }
    interface ZenAvatarIcon {
        /**
          * Set background color
         */
        "background"?: string;
        /**
          * Set font color
         */
        "color"?: string;
        /**
          * Set email
         */
        "email"?: string;
        /**
          * Set image URL
         */
        "imageUrl"?: string;
        /**
          * Set override for user name initials
         */
        "initials"?: string;
        /**
          * Icon size
         */
        "size"?: AvatarIconSize;
        /**
          * Set name and surname
         */
        "userName"?: string;
    }
    interface ZenBreadcrumbs {
        /**
          * The separator string
         */
        "separator"?: string;
    }
    interface ZenButton {
        /**
          * If present, button will be disabled
         */
        "disabled"?: boolean;
        /**
          * If present, will show a spinner
         */
        "loading"?: boolean;
        /**
          * Name of element, can be used as reference for form data
         */
        "name"?: string;
        /**
          * Size variant
         */
        "size"?: InputSize;
        /**
          * Color variant of the button
         */
        "variant"?: ButtonVariants;
    }
    interface ZenCard {
        /**
          * Disables card.
         */
        "disabled"?: false;
        /**
          * <Description generated in helper file>
         */
        "padding"?: SpacingShorthand;
        /**
          * Skipped
         */
        "paddingBottom"?: Spacing;
        /**
          * Skipped
         */
        "paddingLeft"?: Spacing;
        /**
          * Skipped
         */
        "paddingRight"?: Spacing;
        /**
          * Skipped
         */
        "paddingTop"?: Spacing;
    }
    interface ZenCheckbox {
        /**
          * Set checked state.
         */
        "checked"?: boolean;
        /**
          * Disables checkbox.
         */
        "disabled"?: false;
        /**
          * Shows the checkbox in indeterminate state
         */
        "indeterminate"?: boolean;
        /**
          * Label of the checkbox.
         */
        "label"?: string;
        /**
          * Name of element, can be used as reference for form data
         */
        "name"?: string;
        /**
          * Shows a red asterisk after label.
         */
        "required"?: false;
    }
    interface ZenDatePicker {
        /**
          * If user can clear the date.
         */
        "allowEmpty"?: boolean;
        /**
          * Close calendar after picking a date
         */
        "closeOnClick"?: boolean;
        /**
          * Date format
         */
        "format"?: string;
        /**
          * Selected date
         */
        "formattedDate"?: string | null;
        /**
          * Shows invalid styles.
         */
        "invalid"?: false;
        /**
          * Placeholder
         */
        "placeholder"?: "Select date";
        /**
          * Size variant
         */
        "size"?: InputSize;
        /**
          * Selected date
         */
        "value"?: Date;
    }
    interface ZenDivider {
    }
    interface ZenDrawer {
        /**
          * Inner drawer hide button clicked
         */
        "onClose"?: (event: CustomEvent<void>) => void;
        /**
          * Is drawer visible
         */
        "opened"?: false;
        /**
          * <Description generated in helper file>
         */
        "padding"?: SpacingShorthand;
        /**
          * Skipped
         */
        "paddingBottom"?: Spacing;
        /**
          * Skipped
         */
        "paddingLeft"?: Spacing;
        /**
          * Skipped
         */
        "paddingRight"?: Spacing;
        /**
          * Skipped
         */
        "paddingTop"?: Spacing;
        /**
          * Position
         */
        "position"?: Position;
    }
    interface ZenDropdown {
        /**
          * Don't draw border around field
         */
        "borderless"?: false;
        /**
          * Close dropdown menu after selecting an item
         */
        "closeOnSelect"?: true;
        /**
          * Disable any changes
         */
        "disabled"?: boolean;
        /**
          * Alignment of field content and menu (if menuWidth set).
         */
        "fieldAlign"?: Align;
        /**
          * Shows invalid styles.
         */
        "invalid"?: false;
        /**
          * To determine if there's enough space under field on open
         */
        "menuHeight"?: string;
        /**
          * Width of menu. Set '100%' to match field width.
         */
        "menuWidth"?: string;
        /**
          * Name of element, can be used as reference for form data
         */
        "name"?: string;
        /**
          * Text in field if nothing selected
         */
        "placeholder"?: string;
        /**
          * Size variant (affects padding, arrow and placeholder). Use `custom` to set height based on selected zen-option item height.
         */
        "size"?: DropdownSize;
        /**
          * Selected option
         */
        "value"?: OptionValue;
    }
    interface ZenIcon {
        /**
          * Icon data (js file) imported from Font Awesome SVG package.
         */
        "icon"?: IconDefinition;
        /**
          * <Description generated in helper file>
         */
        "padding"?: SpacingShorthand;
        /**
          * Skipped
         */
        "paddingBottom"?: Spacing;
        /**
          * Skipped
         */
        "paddingLeft"?: Spacing;
        /**
          * Skipped
         */
        "paddingRight"?: Spacing;
        /**
          * Skipped
         */
        "paddingTop"?: Spacing;
        /**
          * Size of the icon.
         */
        "size"?: IconSize;
    }
    interface ZenInput {
        /**
          * Should display clear button if focused and not empty
         */
        "clearButton"?: true;
        /**
          * Disables input.
         */
        "disabled"?: false;
        /**
          * Focus next control when pressing Enter key
         */
        "enterToTab"?: true;
        /**
          * Paint focused border
         */
        "hasFocus"?: false;
        /**
          * Shows invalid styles.
         */
        "invalid"?: false;
        /**
          * Name of element, can be used as reference for form data
         */
        "name"?: string;
        /**
          * Placeholder of the input.
         */
        "placeholder"?: string;
        /**
          * Size variant
         */
        "size"?: InputSize;
        /**
          * The value of the input.
         */
        "value"?: string;
    }
    interface ZenModal {
        /**
          * Padding of content
         */
        "contentPadding"?: SpacingShorthand;
        /**
          * Padding of footer
         */
        "footerPadding"?: SpacingShorthand;
        /**
          * Padding of header
         */
        "headerPadding"?: SpacingShorthand;
        /**
          * Hide default top-right X and default Cancel button
         */
        "hideCancel"?: boolean;
        /**
          * Modal title (irrelevant if slot `header` passed)
         */
        "label"?: string;
        /**
          * Top-right X button or default Cancel button clicked
         */
        "onCancel"?: (event: CustomEvent<void>) => void;
        /**
          * Default Ok button clicked (irrelevant if slot `buttons` passed)
         */
        "onOk"?: (event: CustomEvent<void>) => void;
        /**
          * Set `true` to show and `false` to hide modal
         */
        "show"?: false;
    }
    interface ZenNotification {
        /**
          * Can dismiss
         */
        "dismissable"?: boolean;
        /**
          * Title
         */
        "heading"?: string;
        /**
          * Variant
         */
        "variant"?: NotificationVariant;
    }
    interface ZenNotificationsWrapper {
    }
    interface ZenOption {
        /**
          * Disable selecting option in dropdown
         */
        "disabled"?: boolean;
        /**
          * Render item as focused
         */
        "focused"?: boolean;
        /**
          * Prevents default hover style on mouse hover
         */
        "noHover"?: boolean;
        /**
          * <Description generated in helper file>
         */
        "padding"?: SpacingShorthand;
        /**
          * Skipped
         */
        "paddingBottom"?: Spacing;
        /**
          * Skipped
         */
        "paddingLeft"?: Spacing;
        /**
          * Skipped
         */
        "paddingRight"?: Spacing;
        /**
          * Skipped
         */
        "paddingTop"?: Spacing;
        /**
          * Render item as selected
         */
        "selected"?: boolean;
        /**
          * Size variant
         */
        "size"?: InputSize;
        /**
          * Value of option when used inside a dropdown
         */
        "value"?: OptionValue;
    }
    interface ZenPanel {
        /**
          * Padding of content section
         */
        "contentPadding"?: SpacingShorthand;
        /**
          * Panel closed
         */
        "onClose"?: (event: CustomEvent<void>) => void;
        /**
          * Panel opened
         */
        "onOpen"?: (event: CustomEvent<void>) => void;
        /**
          * <Description generated in helper file>
         */
        "padding"?: SpacingShorthand;
        /**
          * Skipped
         */
        "paddingBottom"?: Spacing;
        /**
          * Skipped
         */
        "paddingLeft"?: Spacing;
        /**
          * Skipped
         */
        "paddingRight"?: Spacing;
        /**
          * Skipped
         */
        "paddingTop"?: Spacing;
        /**
          * Default visible state
         */
        "visible"?: boolean;
    }
    interface ZenPopover {
        /**
          * Background color
         */
        "backgroundColor"?: string;
        /**
          * Close on click outside
         */
        "closeOnClickOut"?: boolean;
        /**
          * Close on target click if opened
         */
        "closeOnTargetClick"?: boolean;
        /**
          * Show and hide delay. Only affects show on hover! Eg. '100' - both show & hide 100ms. '100 500' - show 100ms, hide 500ms.
         */
        "delay"?: string;
        /**
          * User can click content within popover
         */
        "interactive"?: boolean;
        /**
          * Popover offset
         */
        "offset"?: Offsets;
        /**
          * Visibility changed
         */
        "onVisibleChange"?: (event: CustomEvent<void>) => void;
        /**
          * <Description generated in helper file>
         */
        "padding"?: SpacingShorthand;
        /**
          * Skipped
         */
        "paddingBottom"?: Spacing;
        /**
          * Skipped
         */
        "paddingLeft"?: Spacing;
        /**
          * Skipped
         */
        "paddingRight"?: Spacing;
        /**
          * Skipped
         */
        "paddingTop"?: Spacing;
        /**
          * Position
         */
        "position"?: Placement;
        /**
          * Trigger element
         */
        "targetElement"?: HTMLElement;
        /**
          * Triggering event
         */
        "triggerEvent"?: TriggerEvent;
        /**
          * Show/hide popover
         */
        "visible"?: boolean;
    }
    interface ZenProgressTracker {
        /**
          * Index of currently active step
         */
        "activeIndex"?: number;
        /**
          * User can click step to go to step
         */
        "clickable"?: StepsFilter;
        /**
          * Max label width
         */
        "labelWidth"?: string;
        /**
          * Ordered array of possible steps
         */
        "steps"?: Array<StepItem>;
    }
    interface ZenRadio {
        /**
          * Check/uncheck radio
         */
        "checked"?: boolean;
        /**
          * Radio can't be selected (but you can still set `checked=true`)
         */
        "disabled"?: false;
        /**
          * Group id to which this radio belongs
         */
        "group"?: string;
        /**
          * Name of element, can be used as reference for form data
         */
        "name"?: string;
        /**
          * Shows a red asterisk after label
         */
        "required"?: false;
        /**
          * Value of selected radio in this group
         */
        "selected"?: string;
        /**
          * Value of this radio option
         */
        "value"?: string;
    }
    interface ZenSkeleton {
        /**
          * Description generated in helper file
         */
        "padding"?: SpacingShorthand;
        /**
          * Skipped
         */
        "paddingBottom"?: Spacing;
        /**
          * Skipped
         */
        "paddingLeft"?: Spacing;
        /**
          * Skipped
         */
        "paddingRight"?: Spacing;
        /**
          * Skipped
         */
        "paddingTop"?: Spacing;
        /**
          * Makes the skeleton rounded
         */
        "rounded"?: boolean;
    }
    interface ZenSortable {
        /**
          * Container padding
         */
        "padding"?: SpacingShorthand;
        /**
          * Container item spacing
         */
        "spacing"?: Size | None;
    }
    interface ZenSortableItem {
        /**
          * Container padding
         */
        "padding"?: SpacingShorthand;
    }
    interface ZenSpace {
        /**
          * In some rare occasions we want display:block
         */
        "block"?: boolean;
        /**
          * Horizontal align of items
         */
        "horizontalAlign"?: FlexAlign;
        /**
          * <Description generated in helper file>
         */
        "margin"?: SpacingShorthand;
        /**
          * Skipped
         */
        "marginBottom"?: Spacing;
        /**
          * Skipped
         */
        "marginLeft"?: Spacing;
        /**
          * Skipped
         */
        "marginRight"?: Spacing;
        /**
          * Skipped
         */
        "marginTop"?: Spacing;
        /**
          * Break row/column if content doesn't fit
         */
        "noWrap"?: boolean;
        /**
          * <Description generated in helper file>
         */
        "padding"?: SpacingShorthand;
        /**
          * Skipped
         */
        "paddingBottom"?: Spacing;
        /**
          * Skipped
         */
        "paddingLeft"?: Spacing;
        /**
          * Skipped
         */
        "paddingRight"?: Spacing;
        /**
          * Skipped
         */
        "paddingTop"?: Spacing;
        /**
          * Spacing between items
         */
        "spacing"?: Size | None;
        /**
          * Width: 100%
         */
        "stretch"?: boolean;
        /**
          * Is it row or column?
         */
        "vertical"?: boolean;
        /**
          * Vertical align of items
         */
        "verticalAlign"?: FlexAlign;
    }
    interface ZenSpinner {
    }
    interface ZenTab {
        /**
          * Tab selected event
         */
        "onTabSelect"?: (event: CustomEvent<void>) => void;
        /**
          * Set tab selected
         */
        "selected"?: boolean;
    }
    interface ZenTable {
        /**
          * Private variable (table cleanup in progress)
         */
        "$updating"?: boolean;
        /**
          * Space separated css grid columns<br/>(eg. `auto 1fr 1fr 200px 1fr`)
         */
        "columns"?: "";
    }
    interface ZenTableCell {
        /**
          * Is row expanded (read-only)
         */
        "$depth"?: number;
        /**
          * Can be expanded (read-only)
         */
        "$expandable"?: boolean;
        /**
          * Is row expanded (read-only)
         */
        "$expanded"?: boolean;
        /**
          * Cell is inside header (read-only)
         */
        "$header"?: boolean;
        /**
          * Checkbox indeterminate state (read-only)
         */
        "$indeterminate"?: boolean;
        /**
          * Show checkbox (read-only)
         */
        "$selectable"?: boolean;
        /**
          * Is row selected (read-only)
         */
        "$selected"?: boolean;
        /**
          * Cell remains fixed at the top during scroll (mainly used for headers)
         */
        "$sticky"?: boolean;
        /**
          * Cell custom background color
         */
        "backgroundColor"?: string;
        /**
          * Spanns through whole table
         */
        "fullSpan"?: boolean;
    }
    interface ZenTableRow {
        /**
          * Checkbox indeterminate state (Won't update children)
         */
        "$indeterminate"?: boolean;
        /**
          * Depth position of row (read-only)
         */
        "depth"?: number;
        /**
          * Can be expanded (if has children)
         */
        "expandable"?: boolean;
        /**
          * Is row expanded
         */
        "expanded"?: boolean;
        /**
          * Row represents header
         */
        "header"?: boolean;
        /**
          * Row selected
         */
        "onRowSelectChanged"?: (event: CustomEvent<boolean>) => void;
        /**
          * Show checkbox (read-only)
         */
        "selectable"?: boolean;
        /**
          * Is row selected
         */
        "selected"?: boolean;
        /**
          * Row remains fixed at the top during scroll (mainly used for headers)
         */
        "sticky"?: false;
        /**
          * Visible if no depth or parent.expanded
         */
        "visible"?: boolean;
    }
    interface ZenTabs {
        /**
          * Index of currently selected tab.
         */
        "value"?: number;
    }
    interface ZenText {
        /**
          * Align content to left, right, center (text-align)
         */
        "align"?: Align;
        /**
          * Render bold text
         */
        "bold"?: boolean;
        /**
          * Disabled
         */
        "disabled"?: boolean;
        /**
          * Layout as inlined
         */
        "inline"?: boolean;
        /**
          * Render italic text
         */
        "italic"?: boolean;
        /**
          * Convert casing to lowercase
         */
        "lowercase"?: boolean;
        /**
          * Show text as gray. Useful for disabled things
         */
        "pale"?: boolean;
        /**
          * Shows a red asterisk at the end
         */
        "required"?: false;
        /**
          * Font size
         */
        "size"?: TextSize;
        /**
          * State text style
         */
        "state"?: TextState;
        /**
          * Strikethrough
         */
        "strikethrough"?: boolean;
        /**
          * Truncate
         */
        "truncate"?: boolean;
        /**
          * Underlined
         */
        "underline"?: boolean;
        /**
          * Convert casing to uppercase
         */
        "uppercase"?: boolean;
        /**
          * Apply heading styles
         */
        "variant"?: TextVariant;
    }
    interface ZenTextarea {
        /**
          * Columns (size)
         */
        "cols"?: number;
        /**
          * Appends attribute disabled.
         */
        "disabled"?: false;
        /**
          * Shows invalid styles.
         */
        "invalid"?: false;
        /**
          * Name of element, can be used as reference for form data
         */
        "name"?: string;
        /**
          * Placeholder of the textarea.
         */
        "placeholder"?: string;
        /**
          * Appends attribute required.
         */
        "required"?: false;
        /**
          * Resize (variants)
         */
        "resize"?: Resize;
        /**
          * Rows (size)
         */
        "rows"?: number;
        /**
          * Prefilled text content
         */
        "text"?: string | null;
    }
    interface ZenToggle {
        /**
          * Set checked state.
         */
        "checked"?: boolean;
        /**
          * Set disabled state.
         */
        "disabled"?: false;
        /**
          * Name of element, can be used as reference for form data
         */
        "name"?: string;
    }
    interface ZenTooltip {
        /**
          * Show and hide delay. Eg. '100' - both show & hide 100ms. '100 500' - show 100ms, hide 500ms.
         */
        "delay"?: string;
        /**
          * Set tooltip title
         */
        "heading"?: string;
        /**
          * Set tooltip label
         */
        "label"?: string;
        /**
          * Set link to resource
         */
        "link"?: string;
        /**
          * Set link title
         */
        "linkTitle"?: string;
        /**
          * Limit tooltips height and make content scroll
         */
        "maxHeight"?: string;
        /**
          * Set tooltip max width
         */
        "maxWidth"?: string;
        /**
          * Set tooltip offset to target element
         */
        "offset"?: number;
        /**
          * Description generated in helper file
         */
        "padding"?: SpacingShorthand;
        /**
          * Skipped
         */
        "paddingBottom"?: Spacing;
        /**
          * Skipped
         */
        "paddingLeft"?: Spacing;
        /**
          * Skipped
         */
        "paddingRight"?: Spacing;
        /**
          * Skipped
         */
        "paddingTop"?: Spacing;
        /**
          * Set tooltip position
         */
        "position"?: Placement;
        /**
          * Set tooltip variant
         */
        "variant"?: TooltipVariant;
    }
    interface IntrinsicElements {
        "color-swatch": ColorSwatch;
        "color-swatch-group": ColorSwatchGroup;
        "docs-table": DocsTable;
        "html-playground": HtmlPlayground;
        "text-with-details": TextWithDetails;
        "zen-animate": ZenAnimate;
        "zen-avatar": ZenAvatar;
        "zen-avatar-details": ZenAvatarDetails;
        "zen-avatar-group": ZenAvatarGroup;
        "zen-avatar-icon": ZenAvatarIcon;
        "zen-breadcrumbs": ZenBreadcrumbs;
        "zen-button": ZenButton;
        "zen-card": ZenCard;
        "zen-checkbox": ZenCheckbox;
        "zen-date-picker": ZenDatePicker;
        "zen-divider": ZenDivider;
        "zen-drawer": ZenDrawer;
        "zen-dropdown": ZenDropdown;
        "zen-icon": ZenIcon;
        "zen-input": ZenInput;
        "zen-modal": ZenModal;
        "zen-notification": ZenNotification;
        "zen-notifications-wrapper": ZenNotificationsWrapper;
        "zen-option": ZenOption;
        "zen-panel": ZenPanel;
        "zen-popover": ZenPopover;
        "zen-progress-tracker": ZenProgressTracker;
        "zen-radio": ZenRadio;
        "zen-skeleton": ZenSkeleton;
        "zen-sortable": ZenSortable;
        "zen-sortable-item": ZenSortableItem;
        "zen-space": ZenSpace;
        "zen-spinner": ZenSpinner;
        "zen-tab": ZenTab;
        "zen-table": ZenTable;
        "zen-table-cell": ZenTableCell;
        "zen-table-row": ZenTableRow;
        "zen-tabs": ZenTabs;
        "zen-text": ZenText;
        "zen-textarea": ZenTextarea;
        "zen-toggle": ZenToggle;
        "zen-tooltip": ZenTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "color-swatch": LocalJSX.ColorSwatch & JSXBase.HTMLAttributes<HTMLColorSwatchElement>;
            "color-swatch-group": LocalJSX.ColorSwatchGroup & JSXBase.HTMLAttributes<HTMLColorSwatchGroupElement>;
            "docs-table": LocalJSX.DocsTable & JSXBase.HTMLAttributes<HTMLDocsTableElement>;
            "html-playground": LocalJSX.HtmlPlayground & JSXBase.HTMLAttributes<HTMLHtmlPlaygroundElement>;
            "text-with-details": LocalJSX.TextWithDetails & JSXBase.HTMLAttributes<HTMLTextWithDetailsElement>;
            "zen-animate": LocalJSX.ZenAnimate & JSXBase.HTMLAttributes<HTMLZenAnimateElement>;
            "zen-avatar": LocalJSX.ZenAvatar & JSXBase.HTMLAttributes<HTMLZenAvatarElement>;
            "zen-avatar-details": LocalJSX.ZenAvatarDetails & JSXBase.HTMLAttributes<HTMLZenAvatarDetailsElement>;
            "zen-avatar-group": LocalJSX.ZenAvatarGroup & JSXBase.HTMLAttributes<HTMLZenAvatarGroupElement>;
            "zen-avatar-icon": LocalJSX.ZenAvatarIcon & JSXBase.HTMLAttributes<HTMLZenAvatarIconElement>;
            "zen-breadcrumbs": LocalJSX.ZenBreadcrumbs & JSXBase.HTMLAttributes<HTMLZenBreadcrumbsElement>;
            "zen-button": LocalJSX.ZenButton & JSXBase.HTMLAttributes<HTMLZenButtonElement>;
            "zen-card": LocalJSX.ZenCard & JSXBase.HTMLAttributes<HTMLZenCardElement>;
            "zen-checkbox": LocalJSX.ZenCheckbox & JSXBase.HTMLAttributes<HTMLZenCheckboxElement>;
            "zen-date-picker": LocalJSX.ZenDatePicker & JSXBase.HTMLAttributes<HTMLZenDatePickerElement>;
            "zen-divider": LocalJSX.ZenDivider & JSXBase.HTMLAttributes<HTMLZenDividerElement>;
            "zen-drawer": LocalJSX.ZenDrawer & JSXBase.HTMLAttributes<HTMLZenDrawerElement>;
            "zen-dropdown": LocalJSX.ZenDropdown & JSXBase.HTMLAttributes<HTMLZenDropdownElement>;
            "zen-icon": LocalJSX.ZenIcon & JSXBase.HTMLAttributes<HTMLZenIconElement>;
            "zen-input": LocalJSX.ZenInput & JSXBase.HTMLAttributes<HTMLZenInputElement>;
            "zen-modal": LocalJSX.ZenModal & JSXBase.HTMLAttributes<HTMLZenModalElement>;
            "zen-notification": LocalJSX.ZenNotification & JSXBase.HTMLAttributes<HTMLZenNotificationElement>;
            "zen-notifications-wrapper": LocalJSX.ZenNotificationsWrapper & JSXBase.HTMLAttributes<HTMLZenNotificationsWrapperElement>;
            "zen-option": LocalJSX.ZenOption & JSXBase.HTMLAttributes<HTMLZenOptionElement>;
            "zen-panel": LocalJSX.ZenPanel & JSXBase.HTMLAttributes<HTMLZenPanelElement>;
            "zen-popover": LocalJSX.ZenPopover & JSXBase.HTMLAttributes<HTMLZenPopoverElement>;
            "zen-progress-tracker": LocalJSX.ZenProgressTracker & JSXBase.HTMLAttributes<HTMLZenProgressTrackerElement>;
            "zen-radio": LocalJSX.ZenRadio & JSXBase.HTMLAttributes<HTMLZenRadioElement>;
            "zen-skeleton": LocalJSX.ZenSkeleton & JSXBase.HTMLAttributes<HTMLZenSkeletonElement>;
            "zen-sortable": LocalJSX.ZenSortable & JSXBase.HTMLAttributes<HTMLZenSortableElement>;
            "zen-sortable-item": LocalJSX.ZenSortableItem & JSXBase.HTMLAttributes<HTMLZenSortableItemElement>;
            "zen-space": LocalJSX.ZenSpace & JSXBase.HTMLAttributes<HTMLZenSpaceElement>;
            "zen-spinner": LocalJSX.ZenSpinner & JSXBase.HTMLAttributes<HTMLZenSpinnerElement>;
            "zen-tab": LocalJSX.ZenTab & JSXBase.HTMLAttributes<HTMLZenTabElement>;
            "zen-table": LocalJSX.ZenTable & JSXBase.HTMLAttributes<HTMLZenTableElement>;
            "zen-table-cell": LocalJSX.ZenTableCell & JSXBase.HTMLAttributes<HTMLZenTableCellElement>;
            "zen-table-row": LocalJSX.ZenTableRow & JSXBase.HTMLAttributes<HTMLZenTableRowElement>;
            "zen-tabs": LocalJSX.ZenTabs & JSXBase.HTMLAttributes<HTMLZenTabsElement>;
            "zen-text": LocalJSX.ZenText & JSXBase.HTMLAttributes<HTMLZenTextElement>;
            "zen-textarea": LocalJSX.ZenTextarea & JSXBase.HTMLAttributes<HTMLZenTextareaElement>;
            "zen-toggle": LocalJSX.ZenToggle & JSXBase.HTMLAttributes<HTMLZenToggleElement>;
            "zen-tooltip": LocalJSX.ZenTooltip & JSXBase.HTMLAttributes<HTMLZenTooltipElement>;
        }
    }
}
